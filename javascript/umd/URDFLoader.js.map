{"version":3,"file":"URDFLoader.js","sources":["../src/URDFClasses.js","../src/URDFLoader.js"],"sourcesContent":["import { Object3D, Quaternion } from 'three';\n\nclass URDFRobot extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.type = 'URDFRobot';\n        this.urdfNode = null;\n\n        this.links = null;\n        this.joints = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.links = {};\n        this.joints = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.name in source.joints) {\n\n                this.joints[c.name] = c;\n\n            }\n\n            if (c.isURDFLink && c.name in source.links) {\n\n                this.links[c.name] = c;\n\n            }\n\n        });\n\n        return this;\n\n    }\n\n}\n\nclass URDFLink extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n        this.urdfNode = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n        this.urdfNode = source.urdfNode;\n\n        return this;\n\n    }\n\n}\n\nclass URDFJoint extends Object3D {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n\n        switch (v) {\n\n            case 'fixed':\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = 0;\n                break;\n\n            case 'planar':\n                this.jointValue = new Array(2).fill(0);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue;\n\n    }\n\n    constructor(...args) {\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.urdfNode = null;\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = null;\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.jointType = source.jointType;\n        this.axis = source.axis ? source.axis.clone() : null;\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = Array.isArray(source.jointValue) ? [...source.jointValue] : source.jointValue;\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        return this;\n    }\n\n    /* Public Functions */\n    setAngle(...values) {\n        return this.setOffset(...values);\n    }\n\n    setOffset(...values) {\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n                break;\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                // FromAxisAngle seems to rotate the opposite of the\n                // expected angle for URDF, so negate it here\n                const delta = new Quaternion().setFromAxisAngle(this.axis, angle);\n                this.quaternion.multiplyQuaternions(this.origQuaternion, delta);\n\n                this.jointValue = angle;\n                this.matrixWorldNeedsUpdate = true;\n\n                break;\n            }\n\n            case 'prismatic': {\n\n                let angle = values[0];\n                if (angle == null) break;\n                if (angle === this.jointValue) break;\n\n                if (!this.ignoreLimits) {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.position.copy(this.origPosition);\n                this.position.addScaledVector(this.axis, angle);\n\n                this.jointValue = angle;\n                this.worldMatrixNeedsUpdate = true;\n                break;\n\n            }\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ this.jointType }' joint not yet supported`);\n\n        }\n\n        return this.jointValue;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint };\n","import * as THREE from 'three';\r\nimport { STLLoader } from 'three/examples/js/loaders/STLLoader';\r\nimport { ColladaLoader } from 'three/examples/js/loaders/ColladaLoader';\r\nimport { URDFRobot, URDFJoint, URDFLink } from './URDFClasses.js';\r\n\r\n/*\r\nReference coordinate frames for THREE.js and ROS.\r\nBoth coordinate systems are right handed so the URDF is instantiated without\r\nframe transforms. The resulting model can be rotated to rectify the proper up,\r\nright, and forward directions\r\n\r\nTHREE.js\r\n   Y\r\n   |\r\n   |\r\n   .-----X\r\n ／\r\nZ\r\n\r\nROS URDf\r\n       Z\r\n       |   X\r\n       | ／\r\n Y-----.\r\n\r\n*/\r\n\r\nconst tempQuaternion = new THREE.Quaternion();\r\nconst tempEuler = new THREE.Euler();\r\n\r\n/* URDFLoader Class */\r\n// Loads and reads a URDF file into a THREEjs Object3D format\r\nexport default\r\nclass URDFLoader {\r\n\r\n    // Cached mesh loaders\r\n    get STLLoader() {\r\n\r\n        this._stlloader = this._stlloader || new STLLoader(this.manager);\r\n        return this._stlloader;\r\n\r\n    }\r\n\r\n    get DAELoader() {\r\n\r\n        this._daeloader = this._daeloader || new ColladaLoader(this.manager);\r\n        return this._daeloader;\r\n\r\n    }\r\n\r\n    get TextureLoader() {\r\n\r\n        this._textureloader = this._textureloader || new THREE.TextureLoader(this.manager);\r\n        return this._textureloader;\r\n\r\n    }\r\n\r\n    constructor(manager) {\r\n\r\n        this.manager = manager || THREE.DefaultLoadingManager;\r\n\r\n    }\r\n\r\n    /* Utilities */\r\n    // forEach and filter function wrappers because\r\n    // HTMLCollection does not the by default\r\n    forEach(coll, func) {\r\n\r\n        return [].forEach.call(coll, func);\r\n\r\n    }\r\n    filter(coll, func) {\r\n\r\n        return [].filter.call(coll, func);\r\n\r\n    }\r\n\r\n    // take a vector \"x y z\" and process it into\r\n    // an array [x, y, z]\r\n    _processTuple(val) {\r\n\r\n        if (!val) return [0, 0, 0];\r\n        return val.trim().split(/\\s+/g).map(num => parseFloat(num));\r\n\r\n    }\r\n\r\n    // applies a rotation a threejs object in URDF order\r\n    _applyRotation(obj, rpy, additive = false) {\r\n\r\n        // if additive is true the rotation is applied in\r\n        // addition to the existing rotation\r\n        if (!additive) obj.rotation.set(0, 0, 0);\r\n\r\n        tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\r\n        tempQuaternion.setFromEuler(tempEuler);\r\n        tempQuaternion.multiply(obj.quaternion);\r\n        obj.quaternion.copy(tempQuaternion);\r\n\r\n    }\r\n\r\n    /* Public API */\r\n    // urdf:    The path to the URDF within the package OR absolute\r\n    // packages:     The equivelant of a (list of) ROS package(s):// directory\r\n    // onComplete:      Callback that is passed the model once loaded\r\n    load(urdf, packages, onComplete, options) {\r\n\r\n        // Check if a full URI is specified before\r\n        // prepending the package info\r\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\r\n        const urdfPath = this.manager.resolveURL(urdf);\r\n\r\n        options = Object.assign({ workingPath }, options);\r\n\r\n        fetch(urdfPath, options.fetchOptions)\r\n            .then(res => res.text())\r\n            .then(data => this.parse(data, packages, onComplete, options));\r\n\r\n    }\r\n\r\n    parse(content, packages, onComplete, options) {\r\n\r\n        options = Object.assign({\r\n\r\n            loadMeshCb: this.defaultMeshLoader.bind(this),\r\n            workingPath: '',\r\n\r\n        }, options);\r\n\r\n        let result = null;\r\n        let meshCount = 0;\r\n\r\n        const createMeshTallyFunc = func => {\r\n\r\n            return (...args) => {\r\n\r\n                func(...args);\r\n\r\n                meshCount--;\r\n                if (meshCount === 0) {\r\n\r\n                    requestAnimationFrame(() => {\r\n                        if (typeof onComplete === 'function') {\r\n                            onComplete(result);\r\n                        }\r\n                    });\r\n\r\n                }\r\n            };\r\n        };\r\n\r\n        const loadMeshFunc = (path, ext, done) => {\r\n\r\n            meshCount++;\r\n            options.loadMeshCb(path, ext, createMeshTallyFunc(done));\r\n\r\n        };\r\n        result = this._processUrdf(content, packages, options.workingPath, loadMeshFunc);\r\n\r\n        if (meshCount === 0 && typeof onComplete === 'function') {\r\n\r\n            onComplete(result);\r\n            onComplete = null;\r\n\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    // Default mesh loading function\r\n    defaultMeshLoader(path, ext, done) {\r\n\r\n        if (/\\.stl$/i.test(path)) {\r\n\r\n            this.STLLoader.load(path, geom => {\r\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\r\n                done(mesh);\r\n            });\r\n\r\n        } else if (/\\.dae$/i.test(path)) {\r\n\r\n            this.DAELoader.load(path, dae => done(dae.scene));\r\n\r\n        } else {\r\n\r\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /* Private Functions */\r\n\r\n    // Resolves the path of mesh files\r\n    _resolvePackagePath(pkg, meshPath, currPath) {\r\n\r\n        if (!/^package:\\/\\//.test(meshPath)) {\r\n\r\n            return currPath !== undefined ? currPath + meshPath : meshPath;\r\n\r\n        }\r\n\r\n        // Remove \"package://\" keyword and split meshPath at the first slash\r\n        const [targetPkg, relPath] = meshPath.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\r\n\r\n        if (typeof pkg === 'string') {\r\n\r\n            // \"pkg\" is one single package\r\n            if (pkg.endsWith(targetPkg)) {\r\n\r\n                // \"pkg\" is the target package\r\n                return pkg + '/' + relPath;\r\n\r\n            } else {\r\n\r\n                // Assume \"pkg\" is the target package's parent directory\r\n                return pkg + '/' + targetPkg + '/' + relPath;\r\n\r\n            }\r\n\r\n        } else if (typeof pkg === 'object') {\r\n\r\n            // \"pkg\" is a map of packages\r\n            if (targetPkg in pkg) {\r\n\r\n                return pkg[targetPkg] + '/' + relPath;\r\n\r\n            } else {\r\n\r\n                console.error(`URDFLoader : ${ targetPkg } not found in provided package list!`);\r\n                return null;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // Process the URDF text format\r\n    _processUrdf(data, packages, path, loadMeshCb) {\r\n\r\n        const parser = new DOMParser();\r\n        const urdf = parser.parseFromString(data, 'text/xml');\r\n\r\n        const robottag = this.filter(urdf.children, c => c.nodeName === 'robot').pop();\r\n        return this._processRobot(robottag, packages, path, loadMeshCb);\r\n\r\n    }\r\n\r\n    // Process the <robot> node\r\n    _processRobot(robot, packages, path, loadMeshCb) {\r\n\r\n        const materials = robot.querySelectorAll('material');\r\n        const links = [];\r\n        const joints = [];\r\n        const obj = new URDFRobot();\r\n        obj.name = robot.getAttribute('name');\r\n\r\n        // Process the <joint> and <link> nodes\r\n        this.forEach(robot.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'link') links.push(n);\r\n            else if (type === 'joint') joints.push(n);\r\n\r\n        });\r\n\r\n        // Create the <material> map\r\n        const materialMap = {};\r\n        this.forEach(materials, m => {\r\n\r\n            const name = m.getAttribute('name');\r\n            if (!materialMap[name]) {\r\n\r\n                materialMap[name] = {};\r\n                this.forEach(m.children, c => {\r\n\r\n                    this._processMaterial(\r\n                        materialMap[name],\r\n                        c,\r\n                        packages,\r\n                        path\r\n                    );\r\n\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // Create the <link> map\r\n        const linkMap = {};\r\n        this.forEach(links, l => {\r\n\r\n            const name = l.getAttribute('name');\r\n            linkMap[name] = this._processLink(l, materialMap, packages, path, loadMeshCb);\r\n\r\n        });\r\n\r\n        // Create the <joint> map\r\n        const jointMap = {};\r\n        this.forEach(joints, j => {\r\n\r\n            const name = j.getAttribute('name');\r\n            jointMap[name] = this._processJoint(j, linkMap);\r\n\r\n        });\r\n\r\n        for (const key in linkMap) {\r\n\r\n            if (linkMap[key].parent == null) {\r\n\r\n                obj.add(linkMap[key]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        obj.joints = jointMap;\r\n        obj.links = linkMap;\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    // Process joint nodes and parent them\r\n    _processJoint(joint, linkMap) {\r\n\r\n        const jointType = joint.getAttribute('type');\r\n        const obj = new URDFJoint();\r\n        obj.urdfNode = joint;\r\n        obj.name = joint.getAttribute('name');\r\n        obj.jointType = jointType;\r\n\r\n        let parent = null;\r\n        let child = null;\r\n        let xyz = [0, 0, 0];\r\n        let rpy = [0, 0, 0];\r\n\r\n        // Extract the attributes\r\n        this.forEach(joint.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'origin') {\r\n\r\n                xyz = this._processTuple(n.getAttribute('xyz'));\r\n                rpy = this._processTuple(n.getAttribute('rpy'));\r\n\r\n            } else if (type === 'child') {\r\n\r\n                child = linkMap[n.getAttribute('link')];\r\n\r\n            } else if (type === 'parent') {\r\n\r\n                parent = linkMap[n.getAttribute('link')];\r\n\r\n            } else if (type === 'limit') {\r\n\r\n                obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\r\n                obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // Join the links\r\n        parent.add(obj);\r\n        obj.add(child);\r\n        this._applyRotation(obj, rpy);\r\n        obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n        // Set up the rotate function\r\n        const axisnode = this.filter(joint.children, n => n.nodeName.toLowerCase() === 'axis')[0];\r\n\r\n        if (axisnode) {\r\n\r\n            const axisxyz = axisnode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\r\n            obj.axis = new THREE.Vector3(axisxyz[0], axisxyz[1], axisxyz[2]);\r\n            obj.axis.normalize();\r\n\r\n        }\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    // Process the <link> nodes\r\n    _processLink(link, materialMap, packages, path, loadMeshCb) {\r\n\r\n        const visualNodes = this.filter(link.children, n => n.nodeName.toLowerCase() === 'visual');\r\n        const obj = new URDFLink();\r\n        obj.name = link.getAttribute('name');\r\n        obj.urdfNode = link;\r\n\r\n        this.forEach(visualNodes, vn => this._processVisualNode(vn, obj, materialMap, packages, path, loadMeshCb));\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    _processMaterial(material, node, packages, path) {\r\n\r\n        const type = node.nodeName.toLowerCase();\r\n        if (type === 'color') {\r\n\r\n            const rgba =\r\n                node\r\n                    .getAttribute('rgba')\r\n                    .split(/\\s/g)\r\n                    .map(v => parseFloat(v));\r\n\r\n            this._copyMaterialAttributes(\r\n                material,\r\n                {\r\n                    color: new THREE.Color(rgba[0], rgba[1], rgba[2]),\r\n                    opacity: rgba[3],\r\n                    transparent: rgba[3] < 1,\r\n                });\r\n\r\n        } else if (type === 'texture') {\r\n\r\n            const filename = node.getAttribute('filename');\r\n            const filePath = this._resolvePackagePath(packages, filename, path);\r\n            this._copyMaterialAttributes(\r\n                material,\r\n                {\r\n                    map: this.TextureLoader.load(filePath),\r\n                });\r\n\r\n        }\r\n    }\r\n\r\n    _copyMaterialAttributes(material, materialAttributes) {\r\n\r\n        if ('color' in materialAttributes) {\r\n\r\n            material.color = materialAttributes.color.clone();\r\n            material.opacity = materialAttributes.opacity;\r\n            material.transparent = materialAttributes.transparent;\r\n\r\n        }\r\n\r\n        if ('map' in materialAttributes) {\r\n\r\n            material.map = materialAttributes.map.clone();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Process the visual nodes into meshes\r\n    _processVisualNode(vn, linkObj, materialMap, packages, path, loadMeshCb) {\r\n\r\n        let xyz = [0, 0, 0];\r\n        let rpy = [0, 0, 0];\r\n        let scale = [1, 1, 1];\r\n\r\n        const material = new THREE.MeshPhongMaterial();\r\n        let primitiveModel = null;\r\n        this.forEach(vn.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'geometry') {\r\n\r\n                const geoType = n.children[0].nodeName.toLowerCase();\r\n                if (geoType === 'mesh') {\r\n\r\n                    const filename = n.children[0].getAttribute('filename');\r\n                    const filePath = this._resolvePackagePath(packages, filename, path);\r\n\r\n                    // file path is null if a package directory is not provided.\r\n                    if (filePath !== null) {\r\n\r\n                        const ext = filePath.match(/.*\\.([A-Z0-9]+)$/i).pop() || '';\r\n                        const scaleAttr = n.children[0].getAttribute('scale');\r\n                        if (scaleAttr) scale = this._processTuple(scaleAttr);\r\n\r\n                        loadMeshCb(filePath, ext, (obj, err) => {\r\n\r\n                            if (err) {\r\n\r\n                                console.error('URDFLoader: Error loading mesh.', err);\r\n\r\n                            } else if (obj) {\r\n\r\n                                if (obj instanceof THREE.Mesh) {\r\n\r\n                                    obj.material.copy(material);\r\n\r\n                                }\r\n\r\n                                linkObj.add(obj);\r\n\r\n                                obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n                                obj.rotation.set(0, 0, 0);\r\n\r\n                                // multiply the existing scale by the scale components because\r\n                                // the loaded model could have important scale values already applied\r\n                                // to the root. Collada files, for example, can load in with a scale\r\n                                // to convert the model units to meters.\r\n                                obj.scale.x *= scale[0];\r\n                                obj.scale.y *= scale[1];\r\n                                obj.scale.z *= scale[2];\r\n\r\n                                this._applyRotation(obj, rpy);\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                } else if (geoType === 'box') {\r\n\r\n                    primitiveModel = new THREE.Mesh();\r\n                    primitiveModel.geometry = new THREE.BoxBufferGeometry(1, 1, 1);\r\n                    primitiveModel.material = material;\r\n\r\n                    const size = this._processTuple(n.children[0].getAttribute('size'));\r\n\r\n                    linkObj.add(primitiveModel);\r\n                    primitiveModel.scale.set(size[0], size[1], size[2]);\r\n\r\n                } else if (geoType === 'sphere') {\r\n\r\n                    primitiveModel = new THREE.Mesh();\r\n                    primitiveModel.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\r\n                    primitiveModel.material = material;\r\n\r\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                    primitiveModel.scale.set(radius, radius, radius);\r\n\r\n                    linkObj.add(primitiveModel);\r\n\r\n                } else if (geoType === 'cylinder') {\r\n\r\n                    primitiveModel = new THREE.Mesh();\r\n                    primitiveModel.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\r\n                    primitiveModel.material = material;\r\n\r\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                    const length = parseFloat(n.children[0].getAttribute('length')) || 0;\r\n                    primitiveModel.scale.set(radius, length, radius);\r\n                    primitiveModel.rotation.set(Math.PI / 2, 0, 0);\r\n\r\n                    linkObj.add(primitiveModel);\r\n\r\n                }\r\n\r\n            } else if (type === 'origin') {\r\n\r\n                xyz = this._processTuple(n.getAttribute('xyz'));\r\n                rpy = this._processTuple(n.getAttribute('rpy'));\r\n\r\n            } else if (type === 'material') {\r\n\r\n                const materialName = n.getAttribute('name');\r\n                if (materialName) {\r\n\r\n                    this._copyMaterialAttributes(material, materialMap[materialName]);\r\n\r\n                } else {\r\n\r\n                    this.forEach(n.children, c => {\r\n\r\n                        this._processMaterial(material, c, packages, path);\r\n\r\n                    });\r\n\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        // apply the position and rotation to the primitive geometry after\r\n        // the fact because it's guaranteed to have been scraped from the child\r\n        // nodes by this point\r\n        if (primitiveModel) {\r\n\r\n            this._applyRotation(primitiveModel, rpy, true);\r\n            primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n"],"names":["Object3D","Quaternion","THREE.Quaternion","THREE.Euler","STLLoader","ColladaLoader","THREE.TextureLoader","THREE.DefaultLoadingManager","THREE.LoaderUtils","THREE.Mesh","THREE.MeshPhongMaterial","THREE.Vector3","THREE.Color","THREE.BoxBufferGeometry","THREE.SphereBufferGeometry","THREE.CylinderBufferGeometry"],"mappings":"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"}