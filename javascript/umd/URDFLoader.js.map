{"version":3,"file":"URDFLoader.js","sources":["../src/URDFLoader.js"],"sourcesContent":["import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/js/loaders/STLLoader';\nimport { ColladaLoader } from 'three/examples/js/loaders/ColladaLoader';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    // Cached mesh loaders\n    get STLLoader() {\n\n        this._stlloader = this._stlloader || new STLLoader(this.manager);\n        return this._stlloader;\n\n    }\n\n    get DAELoader() {\n\n        this._daeloader = this._daeloader || new ColladaLoader(this.manager);\n        return this._daeloader;\n\n    }\n\n    get TextureLoader() {\n\n        this._textureloader = this._textureloader || new THREE.TextureLoader(this.manager);\n        return this._textureloader;\n\n    }\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n\n    }\n\n    /* Utilities */\n    // forEach and filter function wrappers because\n    // HTMLCollection does not the by default\n    forEach(coll, func) {\n\n        return [].forEach.call(coll, func);\n\n    }\n    filter(coll, func) {\n\n        return [].filter.call(coll, func);\n\n    }\n\n    // take a vector \"x y z\" and process it into\n    // an array [x, y, z]\n    _processTuple(val) {\n\n        if (!val) return [0, 0, 0];\n        return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n    }\n\n    // applies a rotation a threejs object in URDF order\n    _applyRotation(obj, rpy) {\n\n        obj.rotateOnAxis(new THREE.Vector3(0, 0, 1), rpy[2]);\n        obj.rotateOnAxis(new THREE.Vector3(0, 1, 0), rpy[1]);\n        obj.rotateOnAxis(new THREE.Vector3(1, 0, 0), rpy[0]);\n\n    }\n\n    /* Public API */\n    // urdf:    The path to the URDF within the package OR absolute\n    // packages:     The equivelant of a (list of) ROS package(s):// directory\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, packages, onComplete, options) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        options = Object.assign({ workingPath }, options);\n\n        fetch(urdfPath, options.fetchOptions)\n            .then(res => res.text())\n            .then(data => this.parse(data, packages, onComplete, options));\n\n    }\n\n    parse(content, packages, onComplete, options) {\n\n        options = Object.assign({\n\n            loadMeshCb: this.defaultMeshLoader.bind(this),\n            workingPath: '',\n\n        }, options);\n\n        const result = this._processUrdf(content, packages, options.workingPath, options.loadMeshCb);\n\n        if (typeof onComplete === 'function') {\n\n            onComplete(result);\n\n        }\n\n        return result;\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, ext, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            this.STLLoader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            this.DAELoader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n    /* Private Functions */\n\n    // Resolves the path of mesh files\n    _resolvePackagePath(pkg, meshPath, currPath) {\n\n        if (!/^package:\\/\\//.test(meshPath)) {\n\n            return currPath !== undefined ? currPath + meshPath : meshPath;\n\n        }\n\n        // Remove \"package://\" keyword and split meshPath at the first slash\n        const [targetPkg, relPath] = meshPath.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n        if (typeof pkg === 'string') {\n\n            // \"pkg\" is one single package\n            if (pkg.endsWith(targetPkg)) {\n\n                // \"pkg\" is the target package\n                return pkg + '/' + relPath;\n\n            } else {\n\n                // Assume \"pkg\" is the target package's parent directory\n                return pkg + '/' + targetPkg + '/' + relPath;\n\n            }\n\n        } else if (typeof pkg === 'object') {\n\n            // \"pkg\" is a map of packages\n            if (targetPkg in pkg) {\n\n                return pkg[targetPkg] + '/' + relPath;\n\n            } else {\n\n                console.error(`URDFLoader : ${ targetPkg } not found in provided package list!`);\n                return null;\n\n            }\n        }\n    }\n\n    // Process the URDF text format\n    _processUrdf(data, packages, path, loadMeshCb) {\n\n        const parser = new DOMParser();\n        const urdf = parser.parseFromString(data, 'text/xml');\n\n        const robottag = this.filter(urdf.children, c => c.nodeName === 'robot').pop();\n        return this._processRobot(robottag, packages, path, loadMeshCb);\n\n    }\n\n    // Process the <robot> node\n    _processRobot(robot, packages, path, loadMeshCb) {\n\n        const materials = robot.querySelectorAll('material');\n        const links = [];\n        const joints = [];\n        const obj = new THREE.Object3D();\n        obj.name = robot.getAttribute('name');\n\n        // Process the <joint> and <link> nodes\n        this.forEach(robot.children, n => {\n\n            const type = n.nodeName.toLowerCase();\n            if (type === 'link') links.push(n);\n            else if (type === 'joint') joints.push(n);\n\n        });\n\n        // Create the <material> map\n        const materialMap = {};\n        this.forEach(materials, m => {\n\n            const name = m.getAttribute('name');\n            if (!materialMap[name]) {\n\n                materialMap[name] = {};\n                this.forEach(m.children, c => {\n\n                    this._processMaterial(\n                        materialMap[name],\n                        c,\n                        packages,\n                        path\n                    );\n\n                });\n\n            }\n\n        });\n\n        // Create the <link> map\n        const linkMap = {};\n        this.forEach(links, l => {\n\n            const name = l.getAttribute('name');\n            linkMap[name] = this._processLink(l, materialMap, packages, path, loadMeshCb);\n\n        });\n\n        // Create the <joint> map\n        const jointMap = {};\n        this.forEach(joints, j => {\n\n            const name = j.getAttribute('name');\n            jointMap[name] = this._processJoint(j, linkMap);\n\n        });\n\n        for (const key in linkMap) {\n\n            if (linkMap[key].parent == null) {\n\n                obj.add(linkMap[key]);\n\n            }\n\n        }\n\n        obj.joints = jointMap;\n        obj.links = linkMap;\n        obj.isURDFRobot = true;\n        obj.type = 'URDFRobot';\n\n        return obj;\n\n    }\n\n    // Process joint nodes and parent them\n    _processJoint(joint, linkMap) {\n\n        const jointType = joint.getAttribute('type');\n        const obj = new THREE.Object3D();\n        obj.isURDFJoint = true;\n        obj.type = 'URDFJoint';\n\n        obj.name = joint.getAttribute('name');\n        obj.jointType = jointType;\n        obj.axis = null;\n        obj.angle = 0;\n        obj.limit = { lower: 0, upper: 0 };\n        obj.ignoreLimits = false;\n        obj.setOffset = () => {};\n\n        // copy the 'setOffset' function over to 'setAngle' so\n        // it makes sense for other joint types (prismatic, planar)\n        // TODO: Remove the 'setOffset' function\n        // TODO: Figure out how to handle setting and getting angles of other types\n        Object.defineProperties(\n            obj,\n            {\n\n                setAngle: { get() { return this.setOffset; } },\n\n            });\n\n        let parent = null;\n        let child = null;\n        let xyz = [0, 0, 0];\n        let rpy = [0, 0, 0];\n\n        // Extract the attributes\n        this.forEach(joint.children, n => {\n\n            const type = n.nodeName.toLowerCase();\n            if (type === 'origin') {\n\n                xyz = this._processTuple(n.getAttribute('xyz'));\n                rpy = this._processTuple(n.getAttribute('rpy'));\n\n            } else if (type === 'child') {\n\n                child = linkMap[n.getAttribute('link')];\n\n            } else if (type === 'parent') {\n\n                parent = linkMap[n.getAttribute('link')];\n\n            } else if (type === 'limit') {\n\n                obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n            }\n\n        });\n\n        // Join the links\n        parent.add(obj);\n        obj.add(child);\n        this._applyRotation(obj, rpy);\n        obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n        // Set up the rotate function\n        const origRot = new THREE.Quaternion().copy(obj.quaternion);\n        const origPos = new THREE.Vector3().copy(obj.position);\n        const axisnode = this.filter(joint.children, n => n.nodeName.toLowerCase() === 'axis')[0];\n\n        if (axisnode) {\n\n            const axisxyz = axisnode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n            obj.axis = new THREE.Vector3(axisxyz[0], axisxyz[1], axisxyz[2]);\n            obj.axis.normalize();\n\n        }\n\n        switch (jointType) {\n\n            case 'fixed': break;\n            case 'continuous':\n                obj.limit.lower = -Infinity;\n                obj.limit.upper = Infinity;\n\n                // fall through to revolute joint 'setOffset' function\n            case 'revolute':\n                obj.setOffset = function(angle = null) {\n\n                    if (!this.axis) return;\n                    if (angle == null) return;\n\n                    if (!this.ignoreLimits) {\n\n                        angle = Math.min(this.limit.upper, angle);\n                        angle = Math.max(this.limit.lower, angle);\n\n                    }\n\n                    // FromAxisAngle seems to rotate the opposite of the\n                    // expected angle for URDF, so negate it here\n                    const delta = new THREE.Quaternion().setFromAxisAngle(this.axis, angle);\n                    obj.quaternion.multiplyQuaternions(origRot, delta);\n\n                    this.angle = angle;\n\n                };\n                break;\n\n            case 'prismatic':\n                obj.setOffset = function(angle = null) {\n\n                    if (!this.axis) return;\n                    if (angle == null) return;\n\n                    if (!this.ignoreLimits) {\n\n                        angle = Math.min(this.limit.upper, angle);\n                        angle = Math.max(this.limit.lower, angle);\n\n                    }\n\n                    obj.position.copy(origPos);\n                    obj.position.addScaledVector(this.axis, angle);\n\n                    this.angle = angle;\n\n                };\n                break;\n\n            case 'floating':\n            case 'planar':\n                // TODO: Support these joint types\n                console.warn(`'${ jointType }' joint not yet supported`);\n\n        }\n\n        return obj;\n\n    }\n\n    // Process the <link> nodes\n    _processLink(link, materialMap, packages, path, loadMeshCb) {\n\n        const visualNodes = this.filter(link.children, n => n.nodeName.toLowerCase() === 'visual');\n        const obj = new THREE.Object3D();\n        obj.name = link.getAttribute('name');\n        obj.isURDFLink = true;\n        obj.type = 'URDFLink';\n\n        this.forEach(visualNodes, vn => this._processVisualNode(vn, obj, materialMap, packages, path, loadMeshCb));\n\n        return obj;\n\n    }\n\n    _processMaterial(material, node, packages, path) {\n\n        const type = node.nodeName.toLowerCase();\n        if (type === 'color') {\n\n            const rgba =\n                node\n                    .getAttribute('rgba')\n                    .split(/\\s/g)\n                    .map(v => parseFloat(v));\n\n            this._copyMaterialAttributes(\n                material,\n                {\n                    color: new THREE.Color(rgba[0], rgba[1], rgba[2]),\n                    opacity: rgba[3],\n                    transparent: rgba[3] < 1,\n                });\n\n        } else if (type === 'texture') {\n\n            const filename = node.getAttribute('filename');\n            const filePath = this._resolvePackagePath(packages, filename, path);\n            this._copyMaterialAttributes(\n                material,\n                {\n                    map: this.TextureLoader.load(filePath),\n                });\n\n        }\n    }\n\n    _copyMaterialAttributes(material, materialAttributes) {\n\n        if ('color' in materialAttributes) {\n\n            material.color = materialAttributes.color.clone();\n            material.opacity = materialAttributes.opacity;\n            material.transparent = materialAttributes.transparent;\n\n        }\n\n        if ('map' in materialAttributes) {\n\n            material.map = materialAttributes.map.clone();\n\n        }\n\n    }\n\n    // Process the visual nodes into meshes\n    _processVisualNode(vn, linkObj, materialMap, packages, path, loadMeshCb) {\n\n        let xyz = [0, 0, 0];\n        let rpy = [0, 0, 0];\n        let scale = [1, 1, 1];\n\n        const material = new THREE.MeshPhongMaterial();\n        let primitiveModel = null;\n        this.forEach(vn.children, n => {\n\n            const type = n.nodeName.toLowerCase();\n            if (type === 'geometry') {\n\n                const geoType = n.children[0].nodeName.toLowerCase();\n                if (geoType === 'mesh') {\n\n                    const filename = n.children[0].getAttribute('filename');\n                    const filePath = this._resolvePackagePath(packages, filename, path);\n\n                    // file path is null if a package directory is not provided.\n                    if (filePath !== null) {\n\n                        const ext = filePath.match(/.*\\.([A-Z0-9]+)$/i).pop() || '';\n                        const scaleAttr = n.children[0].getAttribute('scale');\n                        if (scaleAttr) scale = this._processTuple(scaleAttr);\n\n                        loadMeshCb(filePath, ext, obj => {\n\n                            if (obj) {\n\n                                if (obj instanceof THREE.Mesh) {\n\n                                    obj.material.copy(material);\n\n                                }\n\n                                linkObj.add(obj);\n\n                                obj.position.set(xyz[0], xyz[1], xyz[2]);\n                                obj.rotation.set(0, 0, 0);\n                                obj.scale.set(scale[0], scale[1], scale[2]);\n                                this._applyRotation(obj, rpy);\n\n                            }\n\n                        });\n\n                    }\n\n                } else if (geoType === 'box') {\n\n                    primitiveModel = new THREE.Mesh();\n                    primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                    primitiveModel.material = material;\n\n                    const size = this._processTuple(n.children[0].getAttribute('size'));\n\n                    linkObj.add(primitiveModel);\n                    primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                } else if (geoType === 'sphere') {\n\n                    primitiveModel = new THREE.Mesh();\n                    primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                    primitiveModel.material = material;\n\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                    primitiveModel.scale.set(radius, radius, radius);\n\n                    linkObj.add(primitiveModel);\n\n                } else if (geoType === 'cylinder') {\n\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                    const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n\n                    primitiveModel = new THREE.Object3D();\n                    const mesh = new THREE.Mesh();\n                    mesh.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\n                    mesh.material = material;\n                    mesh.scale.set(radius, length, radius);\n\n                    primitiveModel.add(mesh);\n                    mesh.rotation.set(Math.PI / 2, 0, 0);\n\n                    linkObj.add(primitiveModel);\n                    this._applyRotation(primitiveModel, rpy);\n                    primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n                }\n\n            } else if (type === 'origin') {\n\n                xyz = this._processTuple(n.getAttribute('xyz'));\n                rpy = this._processTuple(n.getAttribute('rpy'));\n\n            } else if (type === 'material') {\n\n                const materialName = n.getAttribute('name');\n                if (materialName) {\n\n                    this._copyMaterialAttributes(material, materialMap[materialName]);\n\n                } else {\n\n                    this.forEach(n.children, c => {\n\n                        this._processMaterial(material, c, packages, path);\n\n                    });\n\n                }\n\n            }\n        });\n\n        // apply the position and rotation to the primitive geometry after\n        // the fact because it's guaranteed to have been scraped from the child\n        // nodes by this point\n        if (primitiveModel) {\n\n            this._applyRotation(primitiveModel, rpy);\n            primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\n\n        }\n\n    }\n\n};\n"],"names":["STLLoader","ColladaLoader","THREE.TextureLoader","THREE.DefaultLoadingManager","THREE.Vector3","THREE.LoaderUtils","THREE.Mesh","THREE.MeshPhongMaterial","THREE.Object3D","THREE.Quaternion","THREE.Color","THREE.BoxGeometry","THREE.SphereGeometry","THREE.CylinderBufferGeometry"],"mappings":"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"}