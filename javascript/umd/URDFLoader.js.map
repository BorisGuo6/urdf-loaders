{"version":3,"file":"URDFLoader.js","sources":["../src/URDFLoader.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { STLLoader } from 'three/examples/js/loaders/STLLoader';\r\nimport { ColladaLoader } from 'three/examples/js/loaders/ColladaLoader';\r\n\r\n/*\r\nReference coordinate frames for THREE.js and ROS.\r\nBoth coordinate systems are right handed so the URDF is instantiated without\r\nframe transforms. The resulting model can be rotated to rectify the proper up,\r\nright, and forward directions\r\n\r\nTHREE.js\r\n   Y\r\n   |\r\n   |\r\n   .-----X\r\n ／\r\nZ\r\n\r\nROS URDf\r\n       Z\r\n       |   X\r\n       | ／\r\n Y-----.\r\n\r\n*/\r\n\r\n/* URDFLoader Class */\r\n// Loads and reads a URDF file into a THREEjs Object3D format\r\nexport default\r\nclass URDFLoader {\r\n\r\n    // Cached mesh loaders\r\n    get STLLoader() {\r\n\r\n        this._stlloader = this._stlloader || new STLLoader(this.manager);\r\n        return this._stlloader;\r\n\r\n    }\r\n\r\n    get DAELoader() {\r\n\r\n        this._daeloader = this._daeloader || new ColladaLoader(this.manager);\r\n        return this._daeloader;\r\n\r\n    }\r\n\r\n    get TextureLoader() {\r\n\r\n        this._textureloader = this._textureloader || new THREE.TextureLoader(this.manager);\r\n        return this._textureloader;\r\n\r\n    }\r\n\r\n    constructor(manager) {\r\n\r\n        this.manager = manager || THREE.DefaultLoadingManager;\r\n\r\n    }\r\n\r\n    /* Utilities */\r\n    // forEach and filter function wrappers because\r\n    // HTMLCollection does not the by default\r\n    forEach(coll, func) {\r\n\r\n        return [].forEach.call(coll, func);\r\n\r\n    }\r\n    filter(coll, func) {\r\n\r\n        return [].filter.call(coll, func);\r\n\r\n    }\r\n\r\n    // take a vector \"x y z\" and process it into\r\n    // an array [x, y, z]\r\n    _processTuple(val) {\r\n\r\n        if (!val) return [0, 0, 0];\r\n        return val.trim().split(/\\s+/g).map(num => parseFloat(num));\r\n\r\n    }\r\n\r\n    // applies a rotation a threejs object in URDF order\r\n    _applyRotation(obj, rpy) {\r\n\r\n        obj.rotateOnAxis(new THREE.Vector3(0, 0, 1), rpy[2]);\r\n        obj.rotateOnAxis(new THREE.Vector3(0, 1, 0), rpy[1]);\r\n        obj.rotateOnAxis(new THREE.Vector3(1, 0, 0), rpy[0]);\r\n\r\n    }\r\n\r\n    /* Public API */\r\n    // urdf:    The path to the URDF within the package OR absolute\r\n    // packages:     The equivelant of a (list of) ROS package(s):// directory\r\n    // onComplete:      Callback that is passed the model once loaded\r\n    load(urdf, packages, onComplete, options) {\r\n\r\n        // Check if a full URI is specified before\r\n        // prepending the package info\r\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\r\n        const urdfPath = this.manager.resolveURL(urdf);\r\n\r\n        options = Object.assign({ workingPath }, options);\r\n\r\n        fetch(urdfPath, options.fetchOptions)\r\n            .then(res => res.text())\r\n            .then(data => this.parse(data, packages, onComplete, options));\r\n\r\n    }\r\n\r\n    parse(content, packages, onComplete, options) {\r\n\r\n        options = Object.assign({\r\n\r\n            loadMeshCb: this.defaultMeshLoader.bind(this),\r\n            workingPath: '',\r\n\r\n        }, options);\r\n\r\n        const result = this._processUrdf(content, packages, options.workingPath, options.loadMeshCb);\r\n\r\n        if (typeof onComplete === 'function') {\r\n\r\n            onComplete(result);\r\n\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    // Default mesh loading function\r\n    defaultMeshLoader(path, ext, done) {\r\n\r\n        if (/\\.stl$/i.test(path)) {\r\n\r\n            this.STLLoader.load(path, geom => {\r\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\r\n                done(mesh);\r\n            });\r\n\r\n        } else if (/\\.dae$/i.test(path)) {\r\n\r\n            this.DAELoader.load(path, dae => done(dae.scene));\r\n\r\n        } else {\r\n\r\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /* Private Functions */\r\n\r\n    // Resolves the path of mesh files\r\n    _resolvePackagePath(pkg, meshPath, currPath) {\r\n\r\n        if (!/^package:\\/\\//.test(meshPath)) {\r\n\r\n            return currPath !== undefined ? currPath + meshPath : meshPath;\r\n\r\n        }\r\n\r\n        // Remove \"package://\" keyword and split meshPath at the first slash\r\n        const [targetPkg, relPath] = meshPath.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\r\n\r\n        if (typeof pkg === 'string') {\r\n\r\n            // \"pkg\" is one single package\r\n            if (pkg.endsWith(targetPkg)) {\r\n\r\n                // \"pkg\" is the target package\r\n                return pkg + '/' + relPath;\r\n\r\n            } else {\r\n\r\n                // Assume \"pkg\" is the target package's parent directory\r\n                return pkg + '/' + targetPkg + '/' + relPath;\r\n\r\n            }\r\n\r\n        } else if (typeof pkg === 'object') {\r\n\r\n            // \"pkg\" is a map of packages\r\n            if (targetPkg in pkg) {\r\n\r\n                return pkg[targetPkg] + '/' + relPath;\r\n\r\n            } else {\r\n\r\n                console.error(`URDFLoader : ${ targetPkg } not found in provided package list!`);\r\n                return null;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // Process the URDF text format\r\n    _processUrdf(data, packages, path, loadMeshCb) {\r\n\r\n        const parser = new DOMParser();\r\n        const urdf = parser.parseFromString(data, 'text/xml');\r\n\r\n        const robottag = this.filter(urdf.children, c => c.nodeName === 'robot').pop();\r\n        return this._processRobot(robottag, packages, path, loadMeshCb);\r\n\r\n    }\r\n\r\n    // Process the <robot> node\r\n    _processRobot(robot, packages, path, loadMeshCb) {\r\n\r\n        const materials = robot.querySelectorAll('material');\r\n        const links = [];\r\n        const joints = [];\r\n        const obj = new THREE.Object3D();\r\n        obj.name = robot.getAttribute('name');\r\n\r\n        // Process the <joint> and <link> nodes\r\n        this.forEach(robot.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'link') links.push(n);\r\n            else if (type === 'joint') joints.push(n);\r\n        });\r\n\r\n        // Create the <material> map\r\n        const materialMap = {};\r\n        this.forEach(materials, m => {\r\n            const name = m.getAttribute('name');\r\n            if (!materialMap[name]) {\r\n                materialMap[name] = {};\r\n                this.forEach(m.children, c => {\r\n                    this._processMaterial(\r\n                        materialMap[name],\r\n                        c,\r\n                        packages,\r\n                        path\r\n                    );\r\n                });\r\n            }\r\n        });\r\n\r\n        // Create the <link> map\r\n        const linkMap = {};\r\n        this.forEach(links, l => {\r\n\r\n            const name = l.getAttribute('name');\r\n            linkMap[name] = this._processLink(l, materialMap, packages, path, loadMeshCb);\r\n\r\n        });\r\n\r\n        // Create the <joint> map\r\n        const jointMap = {};\r\n        this.forEach(joints, j => {\r\n\r\n            const name = j.getAttribute('name');\r\n            jointMap[name] = this._processJoint(j, linkMap);\r\n\r\n        });\r\n\r\n        for (const key in linkMap) {\r\n\r\n            if (linkMap[key].parent == null) {\r\n\r\n                obj.add(linkMap[key]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        obj.joints = jointMap;\r\n        obj.links = linkMap;\r\n        obj.isURDFRobot = true;\r\n        obj.type = 'URDFRobot';\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    // Process joint nodes and parent them\r\n    _processJoint(joint, linkMap) {\r\n\r\n        const jointType = joint.getAttribute('type');\r\n        const obj = new THREE.Object3D();\r\n        obj.isURDFJoint = true;\r\n        obj.type = 'URDFJoint';\r\n\r\n        obj.name = joint.getAttribute('name');\r\n        obj.jointType = jointType;\r\n        obj.axis = null;\r\n        obj.angle = 0;\r\n        obj.limit = { lower: 0, upper: 0 };\r\n        obj.ignoreLimits = false;\r\n        obj.setOffset = () => {};\r\n\r\n        // copy the 'setOffset' function over to 'setAngle' so\r\n        // it makes sense for other joint types (prismatic, planar)\r\n        // TODO: Remove the 'setOffset' function\r\n        // TODO: Figure out how to handle setting and getting angles of other types\r\n        Object.defineProperties(\r\n            obj,\r\n            {\r\n\r\n                setAngle: { get() { return this.setOffset; } },\r\n\r\n            });\r\n\r\n        let parent = null;\r\n        let child = null;\r\n        let xyz = [0, 0, 0];\r\n        let rpy = [0, 0, 0];\r\n\r\n        // Extract the attributes\r\n        this.forEach(joint.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'origin') {\r\n\r\n                xyz = this._processTuple(n.getAttribute('xyz'));\r\n                rpy = this._processTuple(n.getAttribute('rpy'));\r\n\r\n            } else if (type === 'child') {\r\n\r\n                child = linkMap[n.getAttribute('link')];\r\n\r\n            } else if (type === 'parent') {\r\n\r\n                parent = linkMap[n.getAttribute('link')];\r\n\r\n            } else if (type === 'limit') {\r\n\r\n                obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\r\n                obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // Join the links\r\n        parent.add(obj);\r\n        obj.add(child);\r\n        this._applyRotation(obj, rpy);\r\n        obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n        // Set up the rotate function\r\n        const origRot = new THREE.Quaternion().copy(obj.quaternion);\r\n        const origPos = new THREE.Vector3().copy(obj.position);\r\n        const axisnode = this.filter(joint.children, n => n.nodeName.toLowerCase() === 'axis')[0];\r\n\r\n        if (axisnode) {\r\n\r\n            const axisxyz = axisnode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\r\n            obj.axis = new THREE.Vector3(axisxyz[0], axisxyz[1], axisxyz[2]);\r\n            obj.axis.normalize();\r\n\r\n        }\r\n\r\n        switch (jointType) {\r\n\r\n            case 'fixed': break;\r\n            case 'continuous':\r\n                obj.limit.lower = -Infinity;\r\n                obj.limit.upper = Infinity;\r\n\r\n                // fall through to revolute joint 'setOffset' function\r\n            case 'revolute':\r\n                obj.setOffset = function(angle = null) {\r\n\r\n                    if (!this.axis) return;\r\n                    if (angle == null) return;\r\n\r\n                    if (!this.ignoreLimits) {\r\n\r\n                        angle = Math.min(this.limit.upper, angle);\r\n                        angle = Math.max(this.limit.lower, angle);\r\n\r\n                    }\r\n\r\n                    // FromAxisAngle seems to rotate the opposite of the\r\n                    // expected angle for URDF, so negate it here\r\n                    const delta = new THREE.Quaternion().setFromAxisAngle(this.axis, angle);\r\n                    obj.quaternion.multiplyQuaternions(origRot, delta);\r\n\r\n                    this.angle = angle;\r\n\r\n                };\r\n                break;\r\n\r\n            case 'prismatic':\r\n                obj.setOffset = function(angle = null) {\r\n\r\n                    if (!this.axis) return;\r\n                    if (angle == null) return;\r\n\r\n                    if (!this.ignoreLimits) {\r\n\r\n                        angle = Math.min(this.limit.upper, angle);\r\n                        angle = Math.max(this.limit.lower, angle);\r\n\r\n                    }\r\n\r\n                    obj.position.copy(origPos);\r\n                    obj.position.addScaledVector(this.axis, angle);\r\n\r\n                    this.angle = angle;\r\n\r\n                };\r\n                break;\r\n\r\n            case 'floating':\r\n            case 'planar':\r\n                // TODO: Support these joint types\r\n                console.warn(`'${ jointType }' joint not yet supported`);\r\n\r\n        }\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    // Process the <link> nodes\r\n    _processLink(link, materialMap, packages, path, loadMeshCb) {\r\n\r\n        const visualNodes = this.filter(link.children, n => n.nodeName.toLowerCase() === 'visual');\r\n        const obj = new THREE.Object3D();\r\n        obj.name = link.getAttribute('name');\r\n        obj.isURDFLink = true;\r\n        obj.type = 'URDFLink';\r\n\r\n        this.forEach(visualNodes, vn => this._processVisualNode(vn, obj, materialMap, packages, path, loadMeshCb));\r\n\r\n        return obj;\r\n\r\n    }\r\n\r\n    _processMaterial(material, node, packages, path) {\r\n        const type = node.nodeName.toLowerCase();\r\n        if (type === 'color') {\r\n            const rgba = node.getAttribute('rgba').split(/\\s/g)\r\n                .map(v => parseFloat(v));\r\n            this._copyMaterialAttributes(material, {\r\n                color: new THREE.Color(rgba[0], rgba[1], rgba[2]),\r\n                opacity: rgba[3],\r\n                transparent: rgba[3] < 1,\r\n            });\r\n        } else if (type === 'texture') {\r\n            const filename = node.getAttribute('filename').replace(/^(package:\\/\\/)/, '').replace(/^(package:\\/\\/)/, '');\r\n            const filePath = this._resolvePackagePath(packages, filename, path);\r\n            this._copyMaterialAttributes(material, {\r\n                map: this.TextureLoader.load(filePath),\r\n            });\r\n        }\r\n    }\r\n\r\n    _copyMaterialAttributes(material, materialAttributes) {\r\n        if ('color' in materialAttributes) {\r\n            material.color = materialAttributes.color.clone();\r\n            material.opacity = materialAttributes.opacity;\r\n            material.transparent = materialAttributes.transparent;\r\n        }\r\n        if ('map' in materialAttributes) {\r\n            material.map = materialAttributes.map.clone();\r\n        }\r\n    }\r\n\r\n    // Process the visual nodes into meshes\r\n    _processVisualNode(vn, linkObj, materialMap, packages, path, loadMeshCb) {\r\n        let xyz = [0, 0, 0];\r\n        let rpy = [0, 0, 0];\r\n        let scale = [1, 1, 1];\r\n\r\n        const material = new THREE.MeshPhongMaterial();\r\n        let primitiveModel = null;\r\n        this.forEach(vn.children, n => {\r\n\r\n            const type = n.nodeName.toLowerCase();\r\n            if (type === 'geometry') {\r\n\r\n                const geoType = n.children[0].nodeName.toLowerCase();\r\n                if (geoType === 'mesh') {\r\n\r\n                    const filename = n.children[0].getAttribute('filename');\r\n                    const filePath = this._resolvePackagePath(packages, filename, path);\r\n\r\n                    // file path is null if a package directory is not provided.\r\n                    if (filePath !== null) {\r\n\r\n                        const ext = filePath.match(/.*\\.([A-Z0-9]+)$/i).pop() || '';\r\n                        const scaleAttr = n.children[0].getAttribute('scale');\r\n                        if (scaleAttr) scale = this._processTuple(scaleAttr);\r\n\r\n                        loadMeshCb(filePath, ext, obj => {\r\n\r\n                            if (obj) {\r\n\r\n                                if (obj instanceof THREE.Mesh) {\r\n\r\n                                    obj.material.copy(material);\r\n\r\n                                }\r\n\r\n                                linkObj.add(obj);\r\n\r\n                                obj.position.set(xyz[0], xyz[1], xyz[2]);\r\n                                obj.rotation.set(0, 0, 0);\r\n                                obj.scale.set(scale[0], scale[1], scale[2]);\r\n                                this._applyRotation(obj, rpy);\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    }\r\n\r\n                } else if (geoType === 'box') {\r\n\r\n                    primitiveModel = new THREE.Mesh();\r\n                    primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\r\n                    primitiveModel.material = material;\r\n\r\n                    const size = this._processTuple(n.children[0].getAttribute('size'));\r\n\r\n                    linkObj.add(primitiveModel);\r\n                    primitiveModel.scale.set(size[0], size[1], size[2]);\r\n\r\n                } else if (geoType === 'sphere') {\r\n\r\n                    primitiveModel = new THREE.Mesh();\r\n                    primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\r\n                    primitiveModel.material = material;\r\n\r\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                    primitiveModel.scale.set(radius, radius, radius);\r\n\r\n                    linkObj.add(primitiveModel);\r\n\r\n                } else if (geoType === 'cylinder') {\r\n\r\n                    const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\r\n                    const length = parseFloat(n.children[0].getAttribute('length')) || 0;\r\n\r\n                    primitiveModel = new THREE.Object3D();\r\n                    const mesh = new THREE.Mesh();\r\n                    mesh.geometry = new THREE.CylinderBufferGeometry(1, 1, 1, 30);\r\n                    mesh.material = material;\r\n                    mesh.scale.set(radius, length, radius);\r\n\r\n                    primitiveModel.add(mesh);\r\n                    mesh.rotation.set(Math.PI / 2, 0, 0);\r\n\r\n                    linkObj.add(primitiveModel);\r\n                    this._applyRotation(primitiveModel, rpy);\r\n                    primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n                }\r\n\r\n            } else if (type === 'origin') {\r\n\r\n                xyz = this._processTuple(n.getAttribute('xyz'));\r\n                rpy = this._processTuple(n.getAttribute('rpy'));\r\n\r\n            } else if (type === 'material') {\r\n                const materialName = n.getAttribute('name');\r\n                if (n.children.length) {\r\n                    this.forEach(n.children, c => {\r\n                        switch (c.nodeName.toLowerCase()) {\r\n\r\n                            case 'color':\r\n                                this._processMaterial(material, c);\r\n                                break;\r\n                            case 'texture':\r\n                                if (materialName in materialMap) {\r\n                                    this._copyMaterialAttributes(material, materialMap[materialName]);\r\n                                } else {\r\n                                    this._processMaterial(material, c, packages, path);\r\n                                }\r\n\r\n                        }\r\n                    });\r\n                } else {\r\n                    this._copyMaterialAttributes(material, materialMap[materialName]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // apply the position and rotation to the primitive geometry after\r\n        // the fact because it's guaranteed to have been scraped from the child\r\n        // nodes by this point\r\n        if (primitiveModel) {\r\n\r\n            this._applyRotation(primitiveModel, rpy);\r\n            primitiveModel.position.set(xyz[0], xyz[1], xyz[2]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n};\r\n"],"names":["STLLoader","ColladaLoader","THREE.TextureLoader","THREE.DefaultLoadingManager","THREE.Vector3","THREE.LoaderUtils","THREE.Mesh","THREE.MeshPhongMaterial","THREE.Object3D","THREE.Quaternion","THREE.Color","THREE.BoxGeometry","THREE.SphereGeometry","THREE.CylinderBufferGeometry"],"mappings":"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"}